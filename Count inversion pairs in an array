PROBLEM STATEMENT:

Apply Merge Sort to count inversion pairs in an array 

ALGORITHM:
1.	The idea is similar to merge sort, divide the array into two equal or almost equal halves in each step until the base case is reached.
2.	Create a function merge that counts the number of inversions when two halves of the array are merged, create two indices i and j, i is the index for the first half, and j is an index of the second half. if a[i] is greater than a[j], then there are (mid – i) inversions. because left and right subarrays are sorted, so all the remaining elements in left-subarray (a[i+1], a[i+2] … a[mid]) will be greater than a[j].
3.	Create a recursive function to divide the array into halves and find the answer by summing the number of inversions is the first half, the number of inversion in the second half and the number of inversions by merging the two.
4.	The base case of recursion is when there is only one element in the given half.
5.	Print the answer

CODE:
#include <stdio.h>
#include <stdlib.h> 
int _mergeSort(int arr[], int temp[], int left, int right);
int merge(int arr[], int temp[], int left, int mid, int right);
int mergeSort(int arr[], int array_size)
{
    int* temp = (int*)malloc(sizeof(int) * array_size);
    return _mergeSort(arr, temp, 0, array_size - 1);
}
 int _mergeSort(int arr[], int temp[], int left, int right)
{
    int mid, inv_count = 0;
    if (right > left) {
        mid = (right + left) / 2;
 		inv_count += _mergeSort(arr, temp, left, mid);
         inv_count += _mergeSort(arr, temp, mid + 1, right);
 		inv_count += merge(arr, temp, left, mid + 1, right);
    }
    return inv_count;
}
int merge(int arr[], int temp[], int left, int mid,int right)
{
    int i, j, k;
    int inv_count = 0;
 
    i = left; 
    j = mid; 
    k = left; 
    while ((i <= mid - 1) && (j <= right)) {
        if (arr[i] <= arr[j]) {
            temp[k++] = arr[i++];
        }
        else {
            temp[k++] = arr[j++];
 			inv_count = inv_count + (mid - i);
        }
    }
 	while (i <= mid - 1)
        temp[k++] = arr[i++];
    while (j <= right)
        temp[k++] = arr[j++];
    for (i = left; i <= right; i++)
        arr[i] = temp[i];
 
    return inv_count;
}
 

int main(int argv, char** args)
{
    int i, n, a[100];
  printf("Enter number of elements:");
  scanf("%d",&n);
  printf("Enter %d integers:", n);
  for(i = 0; i < n; i++)
 	scanf("%d",&a[i]);
    printf(" Number of inversions are %d \n",mergeSort(a, n));
    getchar();
    return 0;
}

